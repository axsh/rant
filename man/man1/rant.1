.\"  Name: Rant
.\"  Program Author: Stefan Lang
.\"  Author: Russel Winder from a work by Ralph Amissah
.\"  Description: Flexible, Ruby-based make 
.\"  License: GNU Lesser General Public License (LGPL)
.\"  Notes: Process this file with
.\"    groff -man -Tascii rant.1
.\"    nroff -man rant.1 | most 
.TH rant 1  "2006-10-22" "version 0.5.8" "rant"
.SH NAME
rant \- a flexible, Ruby-based build tool
.PP
.SH SYNOPSIS
.B rant
.RI [ option ]
.RI [ target-name | assignments ]
.SH DESCRIPTION
.B Rant
is a Ruby-based build tool (though it is actually a general relationship management system and so can be
used for other things as well).
.B Rant
is the next generation in the Make, Rake tradition.  As with these earlier systems, activity is specified
using a file; for Rant this is called a Rantfile.  A Rantfile contains task and file relationship
definitions and associated actions.
.PP
When executed, the
.B Rant
command-line tool reads the Rantfile, determines which actions need to be undertaken in what order, and then
executes those actions.  Unlike a Makefile, which is a script written in Make's syntax, a Rantfile is a
script written in the Ruby programming language.  So a Rantfile is a program that generates a relationship
and action system using the full power of a general purpose programming language.  This makes
.B Rant
far more flexible than Make: Make rules cannot not be programmed, they have to be specified a priori, and
action programming relies on the installed toolset, particularly the Shell.  Using Ruby rather than Shell
for actions makes for a very much more portable system since the available tools are managed by Ruby, no
assumptions on availability have to be made.  Using the Ruby platform as a base, augmented with the library
provided by
.BR Rant ,
it is very easy to write extremely sophisticated and yet portable build systems.
.SH OPTIONS
.TP
.B \-h, \-\-help
Print this help and exit.
.TP
.B \-V, \-\-version
Print version of Rant and exit.
.TP
.B \-v, \-\-verbose
Print more messages to stderr.
.TP
.B \-q, \-\-quiet
Don't print commands.
.B \-\-err-commands
Print failed commands and their exit status.
.TP
.B \-C DIRECTORY, \-\-directory DIRECTORY
Run rant in DIRECTORY.
.TP
.B  \-c, \-\-cd\-parent
Run rant in parent directory with Rantfile.
.TP \-u, \-\-look\-up
Look in parent directories for root Rantfile.
.TP
.B \-f RANTFILE,  \-\-rantfile RANTFILE
Process RANTFILE instead of standard Rantfile names. Multiple files may be specified with this option.
.TP
.B \-a TARGET, \-\-force\-run TARGET
Force rebuild of TARGET and all dependencies.
.TP
.B \-n, \-\-dry\-run
Print information about what would happen instead of actually executing actions.
.TP
.B \-T, \-\-tasks
Show a list of all described tasks and exit.
.SH INVOCATION
Usually you will run
.B Rant
by giving the name of the task(s) to be invoked as argument(s). To get an overview for the project in the
current working directory, run
.B Rant
with the \-\-tasks (short form: \-T) option.  For example:
.PP
.nf
    % rant \-T
    rant               # => test
    rant package       # Create packages for distribution.
    rant doc           # Generate documentation.
    rant test          # Run unit tests.
    rant cov           # Run all tests and generate coverage with rcov.
    rant clean         # Remove autogenerated files.
    rant publish\-docs  # Publish html docs on RubyForge.
                       #   Note: scp will prompt for rubyforge password.
.fi
.PP
This lists the documented tasks for the project. The first line generally tells you the task(s) that will be
invoked when no argument is given to
.BR Rant .
In the above example, the default task is the test task.
.PP
When you invoke
.B Rant
on the command line it performs the following steps (roughly):
.PP
1.  Process command-line options and arguments. An option starts with two dashes or one for the single letter
equivalent. Arguments of the form VAR=VAL set variables available in the Rantfile(s). All other arguments
are names of tasks to be invoked.
.PP
2.  Load Rantfile in working directory. Rantfiles with the following names are recognized:
.PP
           Rantfile
           rantfile
           root.rant
.PP
3. Calculate task dependencies and invoke required tasks. If no task was given on the command line, a
task called "default" will be invoked. If the "default" task doesn't exist, the first task will be invoked.
.SS Dry\-Run Mode
If you run rant in "dry run" mode, it will print the actions it will print out information about what will
happen in a real run instead of actually executing actions. This can be useful in debugging your
Rantfiles. To enable it, give the \-\-dry-run, option or its short form, \-n, on the command line.
.SS Example
The following is a valid Rantfile:
.PP
.nf
    import "command"

    task :install => "foo" do
      sys.install "foo", "/usr/local/bin", :mode => 0755
    end

    gen Command, "foo", "foo.c", "cc \-o $(>) $(<)"
.fi
.PP
Running
.B Rant
in "dry run" mode:
.PP
.nf 
    % rant -n
    Executing "foo"
    - SHELL
      cc -o foo foo.c
    Executing "install"
    - Ruby Proc at Rantfile:3
.fi 
.PP
Then running
.B Rant
in "normal" mode:
.PP
.nf 
    % rant
    cc -o foo foo.c
    install -c -m 0755 foo /usr/local/bin
.fi
.PP
Then running
.B Rant
in "dry run" mode again:
.PP
.nf
    % rant -n
    Executing "install"
    - Ruby Proc at Rantfile:3
.fi
.SH FURTHER INFORMATION
.PP
For more information on 
.B Rant
see:
.I <http://rant.rubyforge.org/>
.PP
.I <http://rant.rubyforge.org/files/doc/rant_rdoc.html>
.PP
.SH AUTHOR
.B Rant
was originally authored by Stefan Lang.  It is now maintained by Xavier Shay, Russel Winder and others.
.PP
This manual page by Russel Winder from a work by Ralph Amissah.
.PP
The Debian package of
.B Rant
is maintained by Ralph Amissah
.SH SEE ALSO
.BR rant\-import (1)
