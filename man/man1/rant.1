.\"  Name: Rant
.\"  Program Author: Stefan Lang
.\"  Author: Ralph Amissah
.\"  Description: Flexible, Ruby based make 
.\"  License: GNU Lesser General Public License (LGPL)
.\"  Notes: Process this file with
.\"    groff -man -Tascii rant.1
.\"    nroff -man rant.1 | most 
.TH rant 1  "July 26, 2006" "version 0.5.7" "rant"
.SH NAME
.B Rant \- Flexible, Ruby based make
.PP
.SH SYNOPSIS
Similar to make, the rant commandline tool reads a file called Rantfile, which contains task definitions. Unlike make, however, an Rantfile is just a valid script written in the Ruby programming language. Since Ruby comes with many useful libraries and is portable across many different operating systems, it's very easy to write portable Rantfiles.
.PP
.I rant \-\-help
provides a list of options
.PP
.I rant \-T
provides a list of tasks in an existing Rantfile
.PP
The rant program
.PP
For a short usage message and a list of options invoke rant with the \-\-help option:
.PP
    % rant \-\-help
.PP
Usually you'll run rant by giving it the name of the task(s) to be invoked as argument(s). To get an overview for the project in the current working directory, run rant with the \-\-tasks (short form: \-T) option:
.PP
    % rant \-T
    rant               # => test
    rant package       # Create packages for distribution.
    rant doc           # Generate documentation.
    rant test          # Run unit tests.
    rant cov           # Run all tests and generate coverage with rcov.
    rant clean         # Remove autogenerated files.
    rant publish\-docs  # Publish html docs on RubyForge.
                       #   Note: scp will prompt for rubyforge password.
.PP
This lists the "public" tasks for the project. The first line always tells you the task(s) that will be invoked when no argument is given to rant, in the above example, this would be the test task.
.PP
When you invoke rant on the commandline it performs the following steps (roughly):
.PP
   1. Process commandline options and arguments. An option starts with two dashes or one for the single letter equivalent. Arguments of the form VAR=VAL set variables available in the Rantfile(s). All other arguments are names of tasks to be invoked.
.PP
   2. Load Rantfile in working directory. Rantfiles with the following names are recognized:
.PP
           Rantfile
           rantfile
           root.rant
.PP
   3. Calculate task dependencies and invoke required tasks. If no task was given on the commandline, a task called "default" will be invoked. If the "default" task doesn't exist, the first task will be invoked.
.PP
Dry\-Run
.PP
If you run rant in dry\-run mode, it will print the actions it would execute instead of actually executing them. This can be useful in debugging your Rantfiles. To enable it, give the \-\-dry-run, option or its short form, \-n, on the commandline.
.PP
Example Rantfile:
.PP
    import "command"
.PP
    task :install => "foo" do
      sys.install "foo", "/usr/local/bin", :mode => 0755
    end
.PP
    gen Command, "foo", "foo.c", "cc \-o $(>) $(<)"

.PP
Running rant in dry\-run mode:
.PP
.\" preformatted text follows
.nf 
    % rant \-n
    Executing "foo"
    \- SHELL
      cc \-o foo foo.c
    Executing "install"
    - Ruby Proc at Rantfile:3
.fi 
Running rant in "normal" mode:
.\" preformatted text follows
.nf 
    % rant
    cc \-o foo foo.c
    install \-c \-m 0755 foo /usr/local/bin
.fi
Running rant in dry\-run mode again:
.\" preformatted text follows
.nf
    % rant \-n
    Executing "install"
    \- Ruby Proc at Rantfile:3
.fi
.\"%% Further Information
.SH FURTHER INFORMATION
.PP
For more information on 
.I Rant
see:
.I <http://rant.rubyforge.org/>
.PP
.I <http://rant.rubyforge.org/files/doc/rant_rdoc.html>
.PP
.SH AUTHOR
Rant is by Stefan Lang, maintained by Xavier Shay and others
.PP
This package is maintained by Ralph Amissah
.SH SEE
.BR rant\-import(1)
