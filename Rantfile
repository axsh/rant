#!/usr/bin/env ruby

# Rantfile for Rant :)

require 'rant'

import %w(rubytest rubydoc rubypackage)

task :default => :test

lib_files = FileList["lib/**/*.rb"]
doc_files = lib_files + FileList["**/*.rdoc"]
dist_files = FileList["{bin,lib,test}/**/*"] +
	FileList["*"].no_dir.no_file("InstalledFiles").no_file("Session.vim")

gen RubyPackage, "rant" do |t|
    t.version = `#{Env::RUBY} run_rant --version`.split[1]
    t.summary = "Rant is a Ruby based build tool."
    t.files = dist_files
    t.bindir = "bin"
    t.executable = "rant"
    t.has_rdoc = true
    t.author = "Stefan Lang"
    t.email = "langstefan@gmx.at"
    desc "Create packages for distribution."
    t.package_task
end

desc "Generate documentation."
gen RubyDoc do |g|
    g.files.concat FileList["**/*.rdoc"].no_dir("pkg")
    g.opts = %w(-S -c UTF-8 --title Rant --main lib/rant.rb)
end

# Just to test Rant.
gen RubyDoc, :rdoc do |g|
    g.verbose = true
    g.files = doc_files
    g.opts = %w(-S -c UTF-8 --title Rant --main lib/rant.rb)
end

desc "Run basic tests."
gen RubyTest do |g|
    g.pattern = 'test_*.rb'
end

desc "Run first test-project.",
     "Warning: writes to disc."
gen RubyTest, :testp1 do |g|
    g.libs << "test"
    g.test_files = ["test/project1/test_project.rb"]
end

desc "Run second test project.",
     "Warning: writes to disc"
gen RubyTest, :testp2 do |g|
    g.libs << "test"
    g.test_files = ["test/project2/test_project.rb"]
end

desc "Test small Ruby project."
gen RubyTest, :testrb1 do |g|
    g.libs << "test"
    g.test_files = %w(test/project_rb1/test_project_rb1.rb)
end

desc "Test plugins."
gen RubyTest, :testplugins do |g|
    g.libs << "test"
    g.test_files = FileList["test/plugin/**/test_*"]
end

desc "Run all tests and generate coverage with rcov."
task :cov do
    lp = File.expand_path "lib"
    sys.cd "test" do
	sys %W(rcov -xts_*,tc_*,test_* -I#{lp} ts_all.rb)
    end
end

desc "Run all tests."
gen RubyTest, :tall do |g|
    g.test_files = FileList["test/**/test_*.rb"]
end
task :testall => %w(test testp1 testp2 testrb1 testplugins)

desc "Remove autogenerated files."
task :clean do
    sys.rm_f %w(InstalledFiles .config bench-rant bench-depsearch)
    sys.rm_rf %w(doc pkg test/coverage)
end

# Just for quick visual testing of rant...
task :please_fail do |t|
    sys "mix_nix_gibts"
end

# for quich rant testing
#plugin :Configure

# mainly for rant testing
source 'rantmethods.rb'

if $0 == __FILE__
    Rant.run
end
